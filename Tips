#Variables

url = "http://google.es" #string
port = 8888              #int
version = 3.7            #float
vulnerable = True        # boolean
domains = ['ya.com','ti.es'] #list
ip = ("111.11","2222")   #tuple
server = {"uber":"nginx","tomato":"test"} #diccionari
vulns_vers = {5.5,1.1,2,3} # set
------------------------------
------------------------------
url = "http://google.es"
print(url[7]) # g is in 0-7
print(len(url)) # numers letter
print(url.split('/')[2]) 
[‘http:’,’’, ‘google.com’] #separate

String
Delete a string in a word
language = "willi"
print(language.strip("1"))

Rstrip
Delete a string at the end
language = "tomas"
print(language.strip("s"))

Lstrip
Remove string from the start
language = "touran"
print(language.lstrip("t"))

Replace
language = "coco"
print(language.replace("o","u"))

Count letters or numbers
language = "lam"
print(language.count('l')) 1

Stars and End true or false
language = "malei"
print(language.startswith('m'))
print(language.endswith('m'))

String Formatting
app = "drupal"
version = 2.0
print("%s version %s is vulnerable" % (app,version))
---------------------------------------------------------------------
List
----------
data = ["yaztel.com",3,7.5]
print("domain "+data[0])
print(data[-2]) # negative indexing, you can access last element by -1 index
and second last element by -2
print(len(data)) # print size of the list
print("Port :"+str(data[1]))

Ports = [70,81]
ports.remove(70) # remove function delete element 80 from list
ports.append(8080) # append function add element 8080 at last place
ports.insert(1,81) # insert function add element 81 in specified position
ports.pop() # pop function removes specific index elements if index is
ports.clear() #clean list
---------------------------------------------------------------------
Tuple #similar but the element are defined
---------
tup = ("ua.com",40,4.7)
numbers = {1,2,3,4,5,6}
numbers_2 = {4,5,6,7,8,9}
print(numbers.union(numbers_2))
print(numbers.intersection(numbers_2))
numbers = {1,2,3,4,5,6}
numbers.add(7) # add new element to set
numbers.discard(5) # remove element 5 from set
numbers.remove(8) # we can use remove function but it raise exception if
element not present
-------------------------------------------------------------------
Dictionary #good like JSON
----------
tv = {"samsoi":450,"tesl":650,"anoni":999}
print(tv['samsoi'])
print(tv['tesl'])

print(tv.keys()) # print only keys
print(tv.values()) # print only values

update
tv.update({"samsoi":999999})
print(tv)
del tv["samsoi"]
print(tv)

print(tv.get("samsoi"))
---------------------------------------------------------------------
BASIC OPERATORS
---------
A = 1
b = 2
Print(A+b)
Print(A-b)
Print(A*b)
Print(A/b)
Print(A**b)

string = will
string_1 = smi
string_2 = smile
print(string + string_1 + string_2
------------------------------------------------------------------
CONDITIONS  
---------------
fixed_version = 8
version = 7
if version < fixed_version:
        print ("version {} is vulnerable".format(version))
else:
        print ("Not Vulnerable")
        
ELSE IF
app = 'wordpress'
if app == 'drupal':
   wordlist = 'drupal.txt'
elif app == 'wordpress':
   wordlist = 'wordpress.txt'   # only choose the file
-------------------------------------------------------------------
WHILE LOOP
----------
i=1
while i<=50:
print(i)
------------------------------------------------------------------
FOR LOOP
---------
for i in range(1,51): #range function generates a list from 1 to 50.
print(i) #print 1 to 50
-
domains = ['pa.com','ay.com','yaoo.com']
for domain in domains:
print(domain)
-
phones = {"red":10000,"kia":15000,"op":10000}
for phone in phones:
print(phones[phone])
-
url = "https://goo.com"
for u in url: # iterate over string
print(u)
--------------------------------------------------------------------------
FUNCTIONS

def hello(): # function without arguments
print("Hello World")
hello()

def add(a,b): # function without arguments
return a+b
print(add(5,4))

def isdomainlive(domain):
#here to do something to check whether the domain is alive or not.
return True #or False

if isdomainlive("subdomain.example.com"):
#perform something if domain is live
print("domain is alive")
------------------------------------------------------------------------
ARBITRARY ARGUMENTS TUPLAS

def printdomains(*domains): # function definition
   for domain in domains:
       print(domain)
printdomains("google.com","apple.com","microsoft.com") # function call
-----------------------------------------------------------------------
ARBITRARY KEYWORD ARGUMENTS DICCIONARY

def domaininfo(**domain):
     for key in domain:
        print(domain[key])
domaininfo(host="google.com",port=443
-----------------------------------------------------------------------
DEFAULT PARAMETER VALUE

def vulnerable(yes=True):
  if yes:
    print("Vulnerable")
  else:
    print("Not Vulnerable")
vulnerable(yes=False) # print as not vulnerable
vulnerable() # print as vulnerable,because it takes default value.
-----
def printobjects(data):
    if isinstance(data,dict):
     for key in data:
        print(data[key])
    else:
        for value in data:
print(value)
printobjects([1,2,3,4,5])
printobjects(("A","B","C","D"))
printobjects({1.1,2.2,3.3,4.4})
printobjects({"redmi":7000,"oppo":10000})
-------------------------------------------------------------------------

FILE OPERATIONS read,write,append

domains = ["google.com","yahoo.com","ebay.com","hola"]
domain_file = open("domain.txt","w")
for domain in domains:
 domain_file.write(domain+"\n")
domain_file.close()

--------------------------------------------------------------------------
EXCEPCION HANDLING

try:
 testfile = open("filename.txt","r")
except:
 print("File not found")
 -------------------------------------------------------------------------
 REGULAR EXPRESSION
 
import re
webpage_content = ''' Django error occurred something....
URLconf defined
'''
if re.search(r'URLconf\sdefined',webpage_content):
 print("Django Debug mode enabled")

\w – matches a character or digit
\d – matches digits only
\s – matches a space
\w+ – matches one or more characters including digits
\d+ – matches one or more digits only
\w* – matches zero or more characters including digits
\d* – matches zero or more digits
\s+ – matches one or more spaces
\s* – matches zero or more spaces

https://regex101.com/
-------------------------------------------------------------------------
SCRAPPING

from bs4 import BeautifulSoup as sp
import requests
url = "https://www.vulnerability-lab.com/list-of-bug-bounty-programs.php"
webpage = requests.get(url=url) # send a get request
soup = sp(webpage.content,'html.parser')
tables = soup.find_all('table')
a_tags = tables[4].find_all('a')
sites_list = open("bug-bounty.txt","w")
for a in a_tags:
sites_list.write(a.get('href')+'\n')

DOMAINS LIST

site_list = open("bug-bounty-sites.txt",'r')
sites = site_list.readlines()
domain_list = open("bug-bounty-domains.txt","w")
for site in sites:
if not 'mailto' in site:
split_site = site.split('/')
if len(split_site)>1:
domain_list.write(split_site[2]+'\n')

KEYWORD LIST

domain_list = open("bug-bounty-domains.txt","r")
word_list = open("bug-bounty-wordlist.txt","w")
for domain in domain_list.readlines():
split_domain = domain.split(".")
if len(split_domain)>1:
if len(split_domain[-2])>2:
word_list.write(split_domain[-2]+"\n")

import tldextract
domain_list = open("bug-bounty-domains.txt","r")
word_list = open("bug-bounty-wordlist.txt","w")
for domain in domain_list.readlines():
tld = tldextract.extract(domain)
word_list.write(tld.domain+"\n")

SHODAN

html:"URLconf defined"
html:"URLconf defined" ssl:"sony"

SHODAN AUTOMATION

import shodan
SHODAN_API_KEY = "YOUR_SHODAN_API"
api = shodan.Shodan(SHODAN_API_KEY)
words = open("bug-bounty-wordlist.txt","r")
django_debug_list = open("django-debug-list.txt","w")
for word in words.readlines():
query = "html:'URLconf defined' ssl:"+word.strip('\n')
try:
results = api.search(query)
print('Results found: {}'.format(results['total']))
for result in results['matches']:
print(word)
print('IP: {}'.format(result['ip_str']))
port = result['port']
if port in [80,443]:
if port==443:
ip = "https://"+result['ip_str']
else:
ip = "http://"+result['ip_str']
else:
ip = "http://"+result['ip_str']+":"+str(port)
django_debug_list.write(ip+'\n')
print(")
except Exception as e:
print(e)


html:"Whoops! There was an error"
http.favicon.hash:116323821
Jenkins Without Authentication "X-Jenkins" http.title:"Dashboard"
Login with SSO(Single Sign On) like github,bitbucket etc.  html:"securityRealm"
All jenkins instance "X-Jenkins"























